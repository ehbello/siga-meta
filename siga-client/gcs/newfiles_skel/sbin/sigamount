#!/bin/sh

set -e

LOG="logger -t pam_mount"

MNTPT=$1;shift
USER=$1;shift
USERUID=$1;shift
USERGID=$1;shift
MORRALLA=$*

#cifsmount /sbin/sigamount  %(MNTPT) %(USER) %(USERUID) %(USERGID) %(before=\",\" OPTIONS)"

if grep -q "^${USER}:.*:${MNTPT}:.*" /etc/passwd; then
	${LOG} "[${USER}] local user exists. Nothing to mount"
	exit 0
fi

if mountpoint -q ${MNTPT}; then
	${LOG} "[${USER}] mountpoint ${MNTPT} already mounted. Skipping."
	exit 0
fi

${LOG} "[${USER}] creating directory structure of mountpoint"
mkdir -p ${MNTPT}

FULLPATH=""
for DIR in $(echo $MNTPT | tr "/" " "); do
	FULLPATH="${FULLPATH}/${DIR}"
	if [ -d ${FULLPATH} ] && [ ${FULLPATH} != "/tmp" ]; then
		# FULLPATH must be created by pam_mount
		chown root:root ${FULLPATH}
		chmod 0751 ${FULLPATH}
	fi
done

# The mountpoint only must be accesible by the user
if [ -d ${MNTPT} ] && [ ${MNTPT} != "/tmp" ]; then
	chmod 0700 ${MNTPT}
	chown ${USERUID}:${USERGID} ${MNTPT}
fi

GROUP=`echo ${MNTPT} | cut -d "/" -f 3` 

case ${GROUP} in
	${USER})
		mount -t tmpfs -o size=20M,mode=0777 tmpfs ${MNTPT}
		exit $?
		;;
	tmp|temp|temporal)
		## Temporal space for local client accounts
		mount -t tmpfs -o size=200M,mode=0777 tmpfs ${MNTPT}
		exit $?
		;;
	local)
		URI="//server/${USER}"
		;;
	alumnado.ull.es)
		URI="//aluhome.stic.ull.es/${USER}"
		;;
	ull.es)
		URI="//ddv.ccti.ull.es/${USER}"
		;;
	siga*.stic.ull.es)
		URI="//${GROUP}/${USER}"
		REMOTE=true
		;;
	*)
		URI="//${GROUP}.aulas.ull.es/${USER}"
		;;
esac


${LOG} "[${USER}@${URI}] mounting resource to ${MNTPT}"

# Check if FSCache is available in kernel
if egrep -q "^ *CONFIG_CIFS_FSCACHE=y" /boot/config-`uname -r` && \
 ( egrep -q "^ *CONFIG_FSCACHE=y" /boot/config-`uname -r` || \
 ( egrep -q "^ *CONFIG_FSCACHE=m" /boot/config-`uname -r` && lsmod | grep -q fscache ) ); then
	MORRALLA=",fsc${MORRALLA}"
fi

if [ -n "${REMOTE}" ]; then
		REMOTE_DIR=/tmp/${USER}-remote
		LOCAL_DIR=/tmp/${USER}-local
		DESKTOP_DIR=Escritorio
		DOCUMENTS_DIR=Documentos
		mkdir -p   ${LOCAL_DIR} ${REMOTE_DIR}
		chmod 0700 ${LOCAL_DIR} ${REMOTE_DIR}

		if ! mount -t cifs ${URI} ${REMOTE_DIR} -o "user=ULL/${USER},_netdev,serverino,sec=ntlmv2${MORRALLA}"; then
			${LOG} "[${USER}@${URI}] can't mount resource. Mounting on tmpfs"
			mount -t tmpfs -o size=200M,mode=0777 tmpfs ${MNTPT}
			exit 1
		fi

		# check if remote directories exists before bind
		for DIR in ${DESKTOP_DIR} ${DOCUMENTS_DIR}; do	
			if [ -e ${REMOTE_DIR}/private/${DIR} ] && [ ! -d ${REMOTE_DIR}/private/${DIR} ]; then
				mv ${REMOTE_DIR}/private/${DIR} ${LOCAL_DIR}
			fi
			mkdir -p ${REMOTE_DIR}/private/${DIR} ${LOCAL_DIR}/${DIR}
			chown ${USERID}:${USERGID} ${REMOTE_DIR}/private/${DIR} ${LOCAL_DIR}/${DIR}
			if [ -e ${LOCAL_DIR}/${DIR} ] && [ ! -d ${LOCAL_DIR}/${DIR} ]; then
				mv ${LOCAL_DIR}/${DIR} ${REMOTE_DIR}/private/${DIR}
			fi
		done

		# first branch is writable and remaining are readonly by default.
		${LOG} "[${USER}@${URI}] merging local and remote directories"
		mount -t overlayfs -o lowerdir=${REMOTE_DIR}/private,upperdir=${LOCAL_DIR} overlayfs ${MNTPT}
		
		# mounting bind of directories
		for DIR in ${DESKTOP_DIR} ${DOCUMENTS_DIR}; do	
			${LOG} "[${USER}@${URI}] enabling write of remote ${DIR} directory"
			mount -o bind ${REMOTE_DIR}/private/${DIR} ${MNTPT}/${DIR}
		done

		# The mountpoint only must be accesible by the user
		if [ -d ${MNTPT} ] && [ ${MNTPT} != "/tmp" ]; then
			${LOG} "[${USER}@${URI}] enforcing permissions of mountpoint"
			chmod 0700 ${MNTPT}
			chown ${USERUID}:${USERGID} ${MNTPT}
		fi

		${LOG} "[${USER}@${URI}] Success."

		exit 0
fi

if ! mount -t cifs ${URI} ${MNTPT} -o "user=${USER},_netdev,serverino,sec=ntlmv2${MORRALLA}"; then
	${LOG} "[${USER}@${URI}] can't mount resource. Mounting on tmpfs"
	mount -t tmpfs -o size=200M,mode=0777 tmpfs ${MNTPT}
	exit 1
fi

${LOG} "[${USER}@${URI}] Success."
